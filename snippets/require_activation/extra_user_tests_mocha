context "#deliver_activation_instructions!" do
  setup do
    @user = User.generate!
    Notifier.stubs(:deliver_activation_instructions)
  end

  should "reset the perishable token" do
    @user.expects(:reset_perishable_token!)
    @user.deliver_activation_instructions!
  end

  should "send the reset mail" do
    Notifier.expects(:deliver_activation_instructions).with(@user)
    @user.deliver_activation_instructions!
  end
end

context "#deliver_welcome_email!" do
  setup do
    @user = User.generate!
    Notifier.stubs(:deliver_welcome_email)
  end

  should "reset the perishable token" do
    @user.expects(:reset_perishable_token!)
    @user.deliver_welcome_email!
  end

  should "send the reset mail" do
    Notifier.expects(:deliver_welcome_email).with(@user)
    @user.deliver_welcome_email!
  end
end

context "#has_no_credentials?" do
  setup do
    @user = User.generate
  end

  should "return true if password has not been set" do
    @user.crypted_password = nil
    assert @user.has_no_credentials?
  end

  should "return false if password has been set" do
    @user.crypted_password = "ABCD"
    assert !@user.has_no_credentials?
  end
end

context "#signup!" do
  setup do
    @user = User.generate
    @user.stubs(:save_without_session_maintenance).returns(true)
  end

  should "set the login" do
    @user.signup!(:user => {:login => "joe", :email => "joe@example.com"})
    assert_equal "joe", @user.login
  end

  should "set the email" do
    @user.signup!(:user => {:login => "joe", :email => "joe@example.com"})
    assert_equal "joe@example.com", @user.email
  end

  should "save the user without session maintenance" do
    @user.expects(:save_without_session_maintenance).once
    @user.signup!(:user => {:login => "joe", :email => "joe@example.com"})
  end
end

context "#activate!" do
  setup do
    @user = User.generate
    @user.stubs(:save).returns(true)
  end

  context "without parameters" do
    should "activate the user" do
      @user.activate!
      assert @user.active
    end
  
    should "save the user" do
      @user.expects(:save).once
      @user.activate!
    end
  end

  context "with parameters" do
    should "activate the user" do
      @user.activate!(:user => {:password => "sekrit", :password_confirmation => "sekrit"})
      assert @user.active
    end
  
    should "set the password" do
      @user.activate!(:user => {:password => "sekrit", :password_confirmation => "sekrit"})
      assert_equal "sekrit", @user.password
    end

    should "set the password confirmation" do
      @user.activate!(:user => {:password => "sekrit", :password_confirmation => "sekrit"})
      assert_equal "sekrit", @user.password_confirmation
    end

    should "save the user" do
      @user.expects(:save).once
      @user.activate!(:user => {:password => "sekrit", :password_confirmation => "sekrit"})
    end
  end
end

